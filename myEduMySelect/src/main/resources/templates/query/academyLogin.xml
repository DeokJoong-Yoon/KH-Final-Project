<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myedumyselect.academy.dao.AcademyLoginDao">

    <resultMap type="academyLogin" id="academyLoginMap">
        <id column="academy_id" property="academyId"/>
        <result column="member_type_id" property="memberTypeId"/>
        <result column="academy_number" property="academyNumber"/>
        <result column="academy_join_date" property="academyJoinDate"/>
        <result column="academy_passwd" property="academyPasswd"/>
        <result column="academy_name" property="academyName"/>
        <result column="academy_gu_address" property="academyGuAddress"/>
        <result column="academy_dong_address" property="academyDongAddress"/>
        <result column="academy_road_address" property="academyRoadAddress"/>
        <result column="academy_phone" property="academyPhone"/>
        <result column="academy_manager_name" property="academyManagerName"/>
        <result column="academy_manager_email" property="academyManagerEmail"/>
        <result column="academy_manager_phone" property="academyManagerPhone"/>
        <result column="academy_target_grade" property="academyTargetGrade"/>
        <result column="academy_target_subject" property="academyTargetSubject"/>
        <result column="academy_keyword1" property="academyKeyword1"/>
        <result column="academy_keyword2" property="academyKeyword2"/>
        <result column="academy_keyword3" property="academyKeyword3"/>
        <result column="academy_keyword4" property="academyKeyword4"/>
        <result column="academy_keyword5" property="academyKeyword5"/>
        <result column="academy_fee" property="academyFee"/>
        <result column="academy_passwd_change_date" property="academyPasswdChangeDate"/>
        <result column="academy_login_fail_count" property="academyLoginFailCount"/>
        <result column="academy_account_banned_date" property="academyAccountBannedDate"/>
    </resultMap>

    <!-- 로그인 select -->
    <select id="loginProcess" parameterType="academyLogin" resultMap="academyLoginMap">
        SELECT 
        	*	        
        FROM
        	tb_academy
        WHERE
        	academy_id = #{academyId} AND academy_passwd = #{academyPasswd}
    </select>

	<!-- 로그인 실패 횟수 업데이트 -->
	<update id="updateAcademyLoginFailCount" parameterType="academyLogin">
		UPDATE 
			tb_academy
		SET 
			academy_login_fail_count = #{academyLoginFailCount}
		WHERE 
			academy_id = #{academyId}
	</update>	
	
	<!-- 로그인 제한 상태 업데이트 쿼리 -->
	<update id="academyAccountBannedDate" parameterType="academyLogin">
		UPDATE 
			tb_academy
		SET 
			academy_account_banned_date = #{bannedDate}
		WHERE 
			academy_id = #{academyId}
	</update>
	
    <!-- 회원가입 insert -->
	<insert id="academyInsert" parameterType="academyLogin">
	    INSERT INTO tb_academy (	    
	        academy_id,	        
	        academy_number,	        
	        academy_passwd,
	        academy_name,
	        academy_gu_address,
	        academy_dong_address,
	        academy_road_address,
	        academy_phone,
	        academy_manager_name,
	        academy_manager_email,
	        academy_manager_phone,
	        academy_target_grade,
	        academy_target_subject,
	        academy_keyword1,
	        academy_keyword2,
	        academy_keyword3,
	        academy_keyword4,
	        academy_keyword5,
	        academy_fee	        
	    ) VALUES (
	        #{academyId},	        
	        #{academyNumber},	        
	        #{academyPasswd},
	        #{academyName},
	        #{academyGuAddress},
	        #{academyDongAddress},
	        #{academyRoadAddress},
	        #{academyPhone},
	        #{academyManagerName},
	        #{academyManagerEmail},
	        #{academyManagerPhone},
	        #{academyTargetGrade},
	        #{academyTargetSubject},
	        <choose>
	            <!-- 사용자가 선택한 키워드 개수에 따라 쿼리가 동적으로 생성됨 -->
	            <when test="academyKeyword1 != null">
	                #{academyKeyword1},
	            </when>
	            <otherwise>null,</otherwise>
	        </choose>
	        <choose>
	            <when test="academyKeyword2 != null">
	                #{academyKeyword2},
	            </when>
	            <otherwise>null,</otherwise>
	        </choose>
	        <choose>
	            <when test="academyKeyword3 != null">
	                #{academyKeyword3},
	            </when>
	            <otherwise>null,</otherwise>
	        </choose>
	        <choose>
	            <when test="academyKeyword4 != null">
	                #{academyKeyword4},
	            </when>
	            <otherwise>null,</otherwise>
	        </choose>
	        <choose>
	            <when test="academyKeyword5 != null">
	                #{academyKeyword5},
	            </when>
	            <otherwise>null,</otherwise>
	        </choose>
	        #{academyFee}	        	        
	    )
	</insert>

    <!-- 아이디 중복 체크 쿼리 -->
    <select id="checkId" parameterType="academyLogin" resultType="int">
        select
        	count(academy_id)
        from
        	tb_academy
        where
        	academy_id = #{academyId}
    </select>

    <!-- 이메일 중복 체크 쿼리-->
    <select id="checkEmail" parameterType="academyLogin" resultType="int">
        select
        	count(academy_manager_email)
        from
        	tb_academy
        where
        	academy_manager_email = #{academyManagerEmail}
    </select>
	
	<!-- 마이페이지 정보 조회  -->
    <select id="findById" parameterType="String" resultMap="academyLoginMap">
        select
	        academy_id,
	        member_type_id,	        
	        academy_number,	        
	        academy_passwd,
	        academy_name,
	        academy_gu_address,
	        academy_dong_address,
	        academy_road_address,
	        academy_phone,
	        academy_manager_name,
	        academy_manager_email,
	        academy_manager_phone,
	        academy_target_grade,
	        academy_target_subject,
	        academy_keyword1,
	        academy_keyword2,
	        academy_keyword3,
	        academy_keyword4,
	        academy_keyword5,
	        academy_fee	        
        from
        	TB_ACADEMY
        where
        	ACADEMY_ID = #{academyId}
    </select>

    <!-- 학원정보소스테이블 정보 조회 -->
    <select id="findByNumber" parameterType="String" resultMap="academyLoginMap">
        select
	        academy_number,
	        academy_name,
	        academy_gu_address,
	        academy_road_address,
	        academy_dong_address
        from
        	tb_academy_source
        where
        	academy_number = #{academyNumber}
    </select>        

    <!-- 비밀번호 변경 페이지 비밀번호 수정 -->
    <update id="passwdChange" parameterType="academyLogin">
        UPDATE 
        	tb_academy
        SET            
            academy_passwd = #{academyPasswd},
            academy_passwd_change_date = sysdate
        WHERE 
        	academy_passwd = #{academyPasswd}
    </update>
	
	<!-- 마이페이지 정보 수정 -->
    <update id="academyUpdate" parameterType="academyLogin">
        UPDATE 
        	tb_academy
        SET             
            academy_number = #{academyNumber},
            academy_passwd = #{academyPasswd},
            academy_name = #{academyName}, 
            academy_gu_address = #{academyGuAddress}, 
            academy_dong_address = #{academyDongAddress}, 
            academy_road_address = #{academyRoadAddress},
            academy_phone = #{academyPhone}, 
            academy_manager_name = #{academyManagerName}, 
            academy_manager_email = #{academyManagerEmail}, 
            academy_manager_phone = #{academyManagerPhone},
            academy_target_grade = #{academyTargetGrade}, 
            academy_target_subject = #{academyTargetSubject}, 
            academy_keyword1 = #{academyKeyword1}, 
            academy_keyword2 = #{academyKeyword2},
            academy_keyword3 = #{academyKeyword3}, 
            academy_keyword4 = #{academyKeyword4}, 
            academy_keyword5 = #{academyKeyword5}, 
            academy_fee = #{academyFee}            
        WHERE 
        	academy_id = #{academyId}
    </update>
	
	<!-- 비밀번호 변경 "일자" -->
	<update id="updatePasswdChangeDate" parameterType="academyLogin">
	    UPDATE 
	    	tb_academy
	    SET 
	    	academy_passwd = #{academyPasswd},  <!-- 비밀번호 업데이트 -->
	        academy_passwd_change_date = sysdate
	    WHERE 
	    	academy_id = #{academyId}
	</update>
	
	<!-- 현재 비밀번호 일치확인 -->
	<select id="academyPasswdCheck" parameterType="String" resultMap="academyLoginMap">
	  SELECT 
	  		academy_Passwd 
	  FROM 
	  		tb_academy 
	  WHERE 
	  		academy_id = #{academyId}
	</select>
	
    <!-- DELETE 기능 구현 
    <delete id="deleteAcademy" parameterType="int">
        DELETE 
        
        FROM 
        	tb_academy
        WHERE 
        	academy_id = #{academyId}
    </delete>-->
	
	
	<!--========= 매칭 게시판 =========-->
	<resultMap type="matchingBoard" id="matchingBoardMap">
		<id column="matching_no" property="matchingNo" />
		<result column="academy_id" property="academyId" />
		<result column="matching_private" property="matchingPrivate" />
		<result column="matching_passwd" property="matchingPasswd" />
		<result column="matching_register_date" property="matchingRegisterDate" />
		<result column="matching_edit_date" property="matchingEditDate" />
		<result column="matching_gu_address" property="matchingGuAddress" />
		<result column="matching_dong_address" property="matchingDongAddress" />
		<result column="matching_target_grade" property="matchingTargetGrade" />
		<result column="matching_target_subject" property="matchingTargetSubject" />
		<result column="matching_fee" property="matchingFee" />
		<result column="matching_keyword1" property="matchingKeyword1" />
		<result column="matching_keyword2" property="matchingKeyword2" />
		<result column="matching_keyword3" property="matchingKeyword3" />
		<result column="matching_comment" property="matchingComment" />
	</resultMap>



	<!-- 전체 레코드 수 조회 -->
	<select id="boardListCnt" parameterType="matchingBoard"
		resultType="int">
		SELECT count(*) FROM tb_matching_board
		WHERE academy_id = ${academyId}
	</select>

	<!-- 매칭게시판 글 목록 전체 보기 -->
	<select id="boardList" parameterType="matchingBoard" resultMap="matchingBoardMap">
		<![CDATA[
		SELECT  matching_no
				, matching_gu_address
				, matching_dong_address
				, matching_target_subject
				, matching_target_grade
				, matching_private
				, matching_register_date
				, academy_id
		FROM   (
    			SELECT	/*+ INDEX_DESC(tb_matching_board pk_tb_matching_board_pk) */  
    			rownum as rnum
    					, matching_no
    					, matching_gu_address
    					, matching_dong_address
    					, matching_target_subject
    					, matching_target_grade
    					, matching_private
    					, matching_register_date
    					, academy_id
				FROM   	(
						SELECT * FROM tb_matching_board
						WHERE academy_id = ${academyId}
						ORDER BY matching_register_date DESC) sortedList
    			WHERE ]]>
				<![CDATA[rownum <= #{pageNum} * #{amount}) boardList
				WHERE rnum > (#{pageNum} - 1 ) * #{amount}
				]]>
	</select>


	<!-- 매칭게시판 게시글 상세 보기 -->
	<select id="boardDetail" parameterType="matchingBoard"
		resultMap="matchingBoardMap">
		SELECT matching_no
		, matching_gu_address
		,
		matching_dong_address
		, matching_target_subject
		, matching_target_grade
		, matching_fee
		, matching_keyword1
		, matching_keyword2
		,
		matching_keyword3
		, academy_id
		, to_char (matching_register_date,
		'YYYY-MM-DD') as
		matching_register_date
		, ( SELECT
		COUNT(matching_comment_no)
		FROM tb_matching_comment
		WHERE matching_no =
		tb_matching_board.matching_no) as commentCnt
		, matching_comment
		FROM
		tb_matching_board
		WHERE matching_no = #{matchingNo}
	</select> 
	
	<!--========= 홍보게시판 =========-->
	<!-- AdvertiseVO 별칭 일괄 부여 -->
	<resultMap type="advertiseBoard" id="advertiseBoardMap">
		<id column="common_no" property="commonNo" />
		<result column="academy_id" property="academyId" />
		<result column="member_type_id" property="memberTypeId" />
		<result column="common_nickname" property="commonNickname" />
		<result column="common_title" property="commonTitle" />
		<result column="common_content" property="commonContent" />
		<result column="common_register_date" property="commonRegisterDate" />
		<result column="common_edit" property="commonEdit" />
		<result column="common_readcnt" property="commonReadcnt" />
		<result column="common_block_confirm" property="commonBlockConfirm" />
		<result column="common_block_date" property="commonBlockDate" />
		<result column="common_thumb" property="commonThumb" />
		<result column="common_file" property="commonFile" />
	</resultMap>
	
	
	<!-- FileVO 별칭 일괄 부여 -->
	<resultMap type="file" id="fileMap">
		<id column="common_no" property="commonNo" />
		<result column="file_no" property="fileNo" />
		<result column="file_path" property="filePath" />
		<result column="file_name" property="fileName" />
	</resultMap>
	
	
	<!-- 게시글 상세 보기를 위한 resultMap -->
	<resultMap type="advertiseBoard" id="boardAndFile">
	    <!-- AdvertiseBoardVO에 대한 매핑 -->
	    <result column="common_no" property="commonNo" />
	    <result column="common_nickname" property="commonNickname" />
	    <result column="common_title" property="commonTitle" />
	    <result column="common_content" property="commonContent" />
	    <result column="common_register_date" property="commonRegisterDate" />
		<result column="common_readcnt" property="commonReadcnt" />														
	    
	    <!-- FileVO에 대한 매핑 -->
	    <collection property="fileVO" ofType="file">
	        <result column="file_no" property="fileNo"/>
	        <result column="file_path" property="filePath"/>
	        <result column="file_name" property="fileName"/>
	    </collection>
	</resultMap>
	
	
	
	
	<!-- 전체 레코드 수 조회 -->
	<select id="advertiseListCnt" parameterType="advertiseBoard" resultType="int">
		<![CDATA[
		SELECT 	count(*) FROM tb_common_board
		WHERE	common_no >= 20000 AND common_no < 30000
		AND		( 	( common_nickname LIKE '%' || #{keyword} || '%' )
					OR  ( common_title LIKE '%' || #{keyword} || '%' )
					OR  ( common_content LIKE '%' || #{keyword} || '%' )
				)
		]]>
	</select>
	
	
	<!-- 홍보게시판 글 목록 조회 + 검색 포함 -->
	<select id="advertiseList" parameterType="advertiseBoard" resultMap="advertiseBoardMap">
		<![CDATA[
		SELECT 	common_no
		, 		academy_id
		, 		member_type_id
		, 		common_nickname
		, 		common_title
		, 		to_char(common_register_date,'YYYY-MM-DD') as common_register_date
		, 		common_readcnt
		,		common_block_confirm
		,		common_thumb
		,		common_file
		FROM 	(
				SELECT /*+ INDEX_DESC(tb_common_board PK_TB_COMMON_BOARD) */
						rownum as rnum
				,		common_no
				,		academy_id
				,		member_type_id
				,		common_nickname
				,		common_title
				,		common_register_date
				,		common_readcnt
				,		common_block_confirm
				,		common_thumb
				,		common_file
	            FROM	tb_common_board
	            WHERE	rownum <= #{pageNum} * #{amount}
	            AND		common_no >= 20000 AND common_no < 30000
	            AND		( 	( common_nickname LIKE '%' || #{keyword} || '%' )
							OR  ( common_title LIKE '%' || #{keyword} || '%' )
							OR  ( common_content LIKE '%' || #{keyword} || '%' )
						)
				)
		WHERE rnum > (#{pageNum} - 1 ) * #{amount}
		]]>
	</select>
	
	
	<!-- 홍보게시판 글 등록 (only 글) : 글을 삽입하고, 자동 생성된 키를 반환 -->
	<insert id="advertiseInsert" parameterType="advertiseBoard" useGeneratedKeys="true" keyProperty="commonNo">	
													<!-- 자동 생성된 키를 사용한다 + 자동 생성된 키를 어느 속성에 매핑할 것인지 설정 -->
	    <![CDATA[
	    INSERT INTO tb_common_board (
	        common_no
	    ,	academy_id
	    ,   member_type_id
	    ,   common_nickname
	    ,   common_title
	    ,   common_content
	    ,   common_register_date
	    )
	    VALUES (
	        advertise_board_seq.nextval
	    ,   #{academyId}
	    ,   2
	    ,   #{commonNickname}
	    ,   #{commonTitle}
	    ,   #{commonContent}
	    ,   sysdate
	    )
	    ]]>
	    <selectKey keyProperty="commonNo" resultType="int" order="AFTER">
	    			<!-- 자동 생성된 키 commonNo를 사용한다. insert문 이후에 select문을 실행한다. -->
	        SELECT advertise_board_seq.currval AS commonNo FROM DUAL
	    </selectKey>
	</insert>
	
	
	<!-- 홍보게시판 게시글 내 첨부파일 등록 -->
	<insert id="advertiseInsertFile" parameterType="file">
	    INSERT
	    INTO 	tb_file (common_no, file_no, file_name, file_path)
	    VALUES 	(
	    			#{commonNo}
	    		, 	notice_board_file_seq.nextval
	    		,	#{fileName}
	    		, 	#{filePath}
	    		)
	</insert>
	
	
	<!-- 홍보게시글 등록 시, advertiseVO의 thumb, file에 첫 번째 사진이 등록되게 하기 -->
	<update id="advertiseThumbnail" parameterType="advertiseBoard">
	    UPDATE tb_common_board
			SET
			    common_thumb = (
			        SELECT
			            CASE
			                WHEN (
			                		SELECT 	COUNT(*) 
			                		FROM 	tb_file 
			                		WHERE 	common_no = tb_common_board.common_no
			                	) = 0 
			                	THEN 'noimage.png'
			                ELSE (
			                		SELECT 	file_name 
			                		FROM 	tb_file 
			                		WHERE 	common_no = tb_common_board.common_no 
			                		ORDER BY file_no 
			                		FETCH FIRST 1 ROW ONLY)
			            END
			        FROM dual
			    ),
			    common_file = (
			        SELECT
			            CASE
			                WHEN (
			                		SELECT 	COUNT(*) 
			                		FROM 	tb_file 
			                		WHERE 	common_no = tb_common_board.common_no
			                	) = 0 
			                	THEN '../../uploadStorage/advertise/noimage.png'
			                ELSE (
			                		SELECT 	file_path 
			                		FROM 	tb_file 
			                		WHERE	common_no = tb_common_board.common_no 
			                		ORDER BY file_no 
			                		FETCH FIRST 1 ROW ONLY)
			            END
			        FROM dual
			    )
			WHERE common_no = #{commonNo}
	</update>
		
	
	<!-- 홍보게시판 게시글 상세 보기 -->
	<select id="advertiseDetail" parameterType="advertiseBoard" resultMap="boardAndFile">
		SELECT		b.common_no,
		           	b.common_nickname,
		           	b.common_title,
		           	b.common_content,
					b.common_readcnt,		   
		           	to_char(b.common_register_date, 'YYYY-MM-DD HH24:MI') as common_register_date,
		           	f.file_no,
		           	f.file_path,
		           	f.file_name
	    FROM    	tb_common_board b
	    LEFT JOIN 	tb_file f ON b.common_no = f.common_no
	    WHERE   	b.common_no = #{commonNo}
	</select>
	
	
	<!-- 홍보게시판 글 삭제 -->
	<delete id="advertiseDelete" parameterType="advertiseBoard">
		DELETE	FROM  tb_common_board
		WHERE	common_no  = #{commonNo} 
	</delete>
	
	
	<!-- 홍보게시판 게시글만 수정 -->
	<update id="advertiseUpdate" parameterType="advertiseBoard">
		UPDATE	tb_common_board
		SET		common_title	= #{commonTitle},
				common_content	= #{commonContent},
				common_edit		= sysdate
		WHERE	common_no		= #{commonNo}
	</update>
	
	
	<!-- 게시글 내 첨부파일 삭제 -->
	<delete id="advertiseDeleteFile" parameterType="advertiseBoard">
		DELETE
		FROM	tb_file
		WHERE	common_no = #{commonNo}
	</delete>
	
	
	<!-- 게시글에 현재 존재하는 파일 경로 찾아오기 -->
	<select id="advertiseNowFile" parameterType="int" resultMap="fileMap">
		SELECT	*
		FROM	tb_file
		WHERE	common_no = #{commonNo}
	</select>
	
	
	<!-- 이전 게시글 번호 추출 -->
	<select id="prevCommonNo" parameterType="advertiseBoard" resultType="int">
		<![CDATA[
			SELECT	MAX (common_no)
			FROM 	tb_common_board
			WHERE	common_no < #{commonNo}
		]]>
	</select>
	
	
	<!-- 다음 게시글 번호 추출 -->
	<select id="nextCommonNo" parameterType="advertiseBoard" resultType="int">
		<![CDATA[
			SELECT	NVL ( MIN (common_no), -1)
			FROM 	tb_common_board
			WHERE	common_no > #{commonNo}
		]]>
	</select>
 
	
	
	<!-- 조회수 -->
	<update id="readCntUpdate" parameterType="advertiseBoard">
		UPDATE	tb_common_board
		SET 	common_readcnt = common_readcnt + 1
		WHERE 	common_no = #{commonNo}
	</update>
	

</mapper>
